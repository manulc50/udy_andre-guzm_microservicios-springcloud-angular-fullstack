# Establecemos el nombre de este microservicio para que pueda ser usado por nuestro servidor Eureka para su registro
spring.application.name=microservicio-alumnos
# Con el valor "${PORT:0}" indicamos que se asigne, o bien el número de puerto contenido en la variable de entorno "PORT", o bien(con "0") un número de puerto disponible generado aleatoriamente, cuando arranque este microservicio. De esta manera, tenemos la posibilidad de escalar horizontalmente(con réplicas) este microservicio
# Si usamos un número de puerto fijo, no podríamos escalar este microservicio porque no puede haber réplicas con el mismo nombre y el mismo número de puerto
server.port=${PORT:0}
# Indicamos al servidor de Eureka que use el contenido de la propiedad "spring.application.name" seguido de ":" más el contenido de la propiedad "random.value" como identificador de instancias de este microservicio
# "random.value" genera números enteros aleatorios
# De esta manera, si se escala horizontalmente este microservicio, cada instancia que se cree va a tener un indentificador único registrado en el servidor Eureka
eureka.instance.instance-id=${spring.application.name}:${random.value}
# Con esta propiedad indicamos a este microservicio donde se localiza nuestro servidor Eureka para que le mande una señal y pueda registrarlo
# Esta propiedad es opcional cuando los microservicios que se van a registrar en el servidor Eureka y el propio servidor Eureka se encuentran todos en la misma máquina(localhost)
# Pero si los microservicios están en una máquina y el servidor Eureka está en otra, si es necesario y obligatorio indicar esta propiedad con la url o ruta de ese servidor
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
# Propiedad que indica la url donde se encuentra la base de datos para este microservicio "microservicio-alumnos"
spring.datasource.url=jdbc:postgresql://localhost:5432/db_microservicio_alumnos
spring.datasource.username=postgres
spring.datasource.password=root
# Propiedad con el driver necesario para conectarse a una base de datos Postgres
spring.datasource.driver-class-name=org.postgresql.Driver
# Dialecto de Hibarnate para Postgres
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL10Dialect
# Esta propiedad es para eliminar un warning que se produce con las bases de datos Postgres cuando arranca la aplicación Spring Boot
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# Esta propiedad con valor "true" genera de manera automática las tablas de la base de datos a partir de las anotaciones de las clases entidad
# Cuando arranquemos esta aplicación Spring Boot, si las tablas no existen, a través de esta propiedad con valor "true", se crean automáticamente, pero si ya existen, no se vuelven a crear
spring.jpa.generate-ddl=true
# Con esta propiedad con valor "debug" habilitamos que se muestren por consola las consultas SQL nativas que se hacen a la base de datos
logging.level.org.hibernate.SQL=debug
# Como este microservicio se comunica con el microservicio "microservicio-cursos" a través de un cliente Feign y como el balanceador de carga Ribbon de Netflix esta actualmente en mantenimiento, se recomienda deshabilitarlo para que sea sustituido por el balanceador de carga propio de Spring Cloud
# Para ello, basta con poner esta propiedad a false
spring.cloud.loadbalancer.ribbon.enabled=false
