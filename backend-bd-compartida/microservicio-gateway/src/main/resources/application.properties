
# Establecemos el nombre de este API Gateway de Spring Cloud para que pueda ser registrado por nuestro servidor Eureka
spring.application.name=microservicio-gateway
# Establecemos el número de puerto donde se va a ejecutar esta aplicación
server.port=8090

# Con esta propiedad indicamos a este API Gateway de Spring Cloud donde se localiza nuestro servidor Eureka para que le mande una señal y pueda registrarlo
# Esta propiedad es opcional cuando los microservicios que se van a registrar en el servidor Eureka y el propio servidor Eureka se encuentran todos en la misma máquina(localhost)
# Pero si los microservicios están en una máquina y el servidor Eureka está en otra, si es necesario y obligatorio indicar esta propiedad con la url o ruta de ese servidor
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# Con la propiedad "spring.cloud.gateway.routes" configuramos nuestras rutas a nuestros microservicios. Esta propiedad recibe un array de rutas
# En la posición 0 de este array de rutas configuramos nuestra ruta para el microservicio "microservicio-alumnos"
# Establecemos el identificador de la ruta con el nombre "microservicio-alumnos"
spring.cloud.gateway.routes[0].id=microservicio-alumnos
# Establecemos el uri de nuestro microservicio "microservicio-alumnos"
# Ponemos "lb:" en el uri para habilitar balanceo de carga en esta ruta para las instancias que se creen de este microservicio 
spring.cloud.gateway.routes[0].uri=lb://microservicio-alumnos
# Establecemos la ruta base "/api/alumnos" para todas las rutas internas("/**") del microservicio "microservicio-alumnos"
spring.cloud.gateway.routes[0].predicates=Path=/api/alumnos/**
# Aplicamos un filtro a esta ruta para eliminar los 2 prefijos de la ruta base "/api/alumnos" para que no se tengan en cuenta a la hora de realizar peticiones http a las rutas internas de este microservicio
spring.cloud.gateway.routes[0].filters=StripPrefix=2

# En la posición 1 de este array de rutas configuramos nuestra ruta para el microservicio "microservicio-cursos"
# Establecemos el identificador de la ruta con el nombre "microservicio-cursos"
spring.cloud.gateway.routes[1].id=microservicio-cursos
# Establecemos el uri de nuestro microservicio "microservicio-cursos"
# Ponemos "lb:" en la uri para habilitar balanceo de carga en esta ruta para las instancias que se creen de este microservicio 
spring.cloud.gateway.routes[1].uri=lb://microservicio-cursos
# Establecemos la ruta base "/api/cursos" para todas las rutas internas("/**") del microservicio "microservicio-cursos"
spring.cloud.gateway.routes[1].predicates=Path=/api/cursos/**
# Aplicamos un filtro a esta ruta para eliminar los 2 prefijos de la ruta base "/api/cursos" para que no se tengan en cuenta a la hora de realizar peticiones http a las rutas internas de este microservicio
spring.cloud.gateway.routes[1].filters=StripPrefix=2

# En la posición 2 de este array de rutas configuramos nuestra ruta para el microservicio "microservicio-examenes"
# Establecemos el identificador de la ruta con el nombre "microservicio-examenes"
spring.cloud.gateway.routes[2].id=microservicio-examenes
# Establecemos el uri de nuestro microservicio "microservicio-examenes"
# Ponemos "lb:" en la uri para habilitar balanceo de carga en esta ruta para las instancias que se creen de este microservicio 
spring.cloud.gateway.routes[2].uri=lb://microservicio-examenes
# Establecemos la ruta base "/api/cursos" para todas las rutas internas("/**") del microservicio "microservicio-examenes"
spring.cloud.gateway.routes[2].predicates=Path=/api/examenes/**
# Aplicamos un filtro a esta ruta para eliminar los 2 prefijos de la ruta base "/api/examenes" para que no se tengan en cuenta a la hora de realizar peticiones http a las rutas internas de este microservicio
spring.cloud.gateway.routes[2].filters=StripPrefix=2

# En la posición 3 de este array de rutas configuramos nuestra ruta para el microservicio "microservicio-respuestas"
# Establecemos el identificador de la ruta con el nombre "microservicio-respuestas"
spring.cloud.gateway.routes[3].id=microservicio-respuestas
# Establecemos el uri de nuestro microservicio "microservicio-respuestas"
# Ponemos "lb:" en la uri para habilitar balanceo de carga en esta ruta para las instancias que se creen de este microservicio 
spring.cloud.gateway.routes[3].uri=lb://microservicio-respuestas
# Establecemos la ruta base "/api/respuestas" para todas las rutas internas("/**") del microservicio "microservicio-respuestas"
spring.cloud.gateway.routes[3].predicates=Path=/api/respuestas/**
# Aplicamos un filtro a esta ruta para eliminar los 2 prefijos de la ruta base "/api/respuestas" para que no se tengan en cuenta a la hora de realizar peticiones http a las rutas internas de este microservicio
spring.cloud.gateway.routes[3].filters=StripPrefix=2

# Como el balanceador de carga Ribbon de Netflix esta actualmente en mantenimiento, se recomienda deshabilitarlo para que sea sustituido por el balanceador de carga propio de Spring Cloud
# Para ello, basta con poner esta propiedad a false
spring.cloud.loadbalancer.ribbon.enabled=false

