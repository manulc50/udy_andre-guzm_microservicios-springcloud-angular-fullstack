# Establecemos el nombre de este microservicio para que pueda ser usado por nuestro servidor Eureka para su registro
spring.application.name=microservicio-examenes
# Con el valor "${PORT:0}" indicamos que se asigne, o bien el número de puerto contenido en la variable de entorno "PORT", o bien(con "0") un número de puerto disponible generado aleatoriamente, cuando arranque este microservicio. De esta manera, tenemos la posibilidad de escalar horizontalmente(con réplicas) este microservicio
# Si usamos un número de puerto fijo, no podríamos escalar este microservicio porque no puede haber réplicas con el mismo nombre y el mismo número de puerto
server.port=${PORT:0}
# Indicamos al servidor de Eureka que use el contenido de la propiedad "spring.application.name" seguido de ":" más el contenido de la propiedad "random.value" como identificador de instancias de este microservicio
# "random.value" genera números enteros aleatorios
# De esta manera, si se escala horizontalmente este microservicio, cada instancia que se cree va a tener un indentificador único registrado en el servidor Eureka
eureka.instance.instance-id=${spring.application.name}:${random.value}
# Con esta propiedad indicamos a este microservicio donde se localiza nuestro servidor Eureka para que le mande una se�al y pueda registrarlo
# Esta propiedad es opcional cuando los microservicios que se van a registrar en el servidor Eureka y el propio servidor Eureka se encuentran todos en la misma máquina(localhost)
# Pero si los microservicios están en una máquina y el servidor Eureka está en otra, si es necesario y obligatorio indicar esta propiedad con la url o ruta de ese servidor
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
# "jdbc:mysql://'host':'port'/'db_name'" sirve tanto para bases de datos MySQL como para bases de datos MariaDB
# Para evitar un error en la ejecución de la aplicación relacionado con el "Timezone",es necesario añadir a esta url o path el parámetro "serverTimezone" con el valor de la zona horaria donde nos encontramos("Europe/Madrid")
# Para evitar otros errores que pueden aparecer en la ejecución de la aplicación relacionados con el "Public Key Retrieval" y el uso de SSL,hay que indicar en esta url o path los parámetros "allowPublickeyRetrieval=true" y "useSSL=false"
spring.datasource.url=jdbc:mysql://localhost:3306/db_microservicios_examenes_compartida?serverTimezone=Europe/Madrid&allowPublickeyRetrieval=true&useSSL=false
spring.datasource.username=root
spring.datasource.password=root
# "com.mysql.cj.jdbc.Driver" sirve tanto para bases de datos MySQL como para bases de datos MariaDB
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# "org.hibernate.dialect.MySQL8Dialect" sirve tanto para bases de datos MySQL como para bases de datos MariaDB
# Otra opción para bases de datos MariaDB es usar el dialecto "org.hibernate.dialect.MariaDB103Dialect"(Si la versión de MariaDB es la 10.3)
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
# Esta propiedad con valor "true" genera de manera automática las tablas de la base de datos a partir de las anotaciones de las clases entidad
# Cuando arranquemos esta aplicación Spring Boot, si las tablas no existen, a través de esta propiedad con valor "true", se crean automáticamente, pero si ya existen, no se vuelven a crear
spring.jpa.generate-ddl=true
# Con esta propiedad con valor "debug" habilitamos que se muestren por consola las consultas SQL nativas que se hacen a la base de datos
logging.level.org.hibernate.SQL=debug